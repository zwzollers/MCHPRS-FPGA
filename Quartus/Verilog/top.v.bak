module lab02_top (clk, ar, start, switches, seg2, seg1, seg0, sck, sdo, sdi, convst);
	input        clk      /*synthesis chip_pin = "AF14"*/; 					                     // 50 MHz clock
	input        ar       /*synthesis chip_pin = "AA14"*/;					                     // asynchronous reset (active low)				                         // Start button (active low)
	input  [5:0] switches /*synthesis chip_pin = "AD12, AD11, AF10, AF9, AC12, AB12"*/; 		 // Input word for dip switches
	output [6:0] seg0     /*synthesis chip_pin = "AH28, AG28, AF28, AG27, AE28, AE27, AE26"*/;
	
	wire		 clk_1;	
	wire 		 clk_500m;
	
	reg [3:0]	seg0_bits;  
	wire [11:0] d_adc;	
	
	wire	s_clk; 	// Serial clock
	wire	s_dat; 	// Serial data
	
	
	
	fclk fclk ( .refclk()clk, .rst(ar), .outclk_0(fclk_wire));
	
	//instantiate the first clock divider to produce a 200 kHz output from 50 MHz input
	clk_div #(29, 7'd500000000)   divider (ar, clk_500m, clk_1); 

	always @(negedge i_ar or posedge i_clk)
	if(~i_ar)
	begin
		seg0_bits = 4'b0;
	end
	else
	begin
		seg0_bits = seg0_bits + 1;
	end
	
	// Instantiate the seven segment decoders
	sevseg_dec segs0 (.x_in(seg0_bits), .segs(seg0));	
endmodule